[gd_scene load_steps=11 format=2]

[ext_resource path="res://battle/pics/coolerRobot.png" type="Texture" id=1]
[ext_resource path="res://battle/sounds/advancedCorral.wav" type="Sample" id=2]
[ext_resource path="res://battle/sounds/corral.wav" type="Sample" id=3]
[ext_resource path="res://battle/sounds/minefield.wav" type="Sample" id=4]
[ext_resource path="res://battle/sounds/ticker.wav" type="Sample" id=5]
[ext_resource path="res://battle/sounds/waterfall.wav" type="Sample" id=6]

[sub_resource type="GDScript" id=1]

script/source = "extends \"../scripts/actor.gd\"

onready var smallBullet = preload(\"res://battle/objects/cSmallBullet.tscn\")
onready var bullet = preload(\"res://battle/objects/cBullet.tscn\")
onready var cross = preload(\"res://battle/objects/cross.tscn\")
onready var player = get_node(\"../player\")

func _ready():
	addRoutine(\"corral1\")
	addRoutine(\"sinkhole1\")
	addRoutine(\"corral2\")
	addRoutine(\"minefield\")
	addRoutine(\"sinkhole2\")
	addRoutine(\"waterfall\")

func corral1():
	health = 80
	var tick = createTimer(0.25)
	var width = 40
	var lanes = 512 / width
	var length = 1
	
	yield(createSoundWaiter(sound).r(\"corral\"),S)
	
	
	while (true):
		for l in range(length):
			for i in range(lanes): shootFrom(smallBullet,PI,Vector2(256 + i * width + width / 2,0))
			yield(tick.r(),T)
		var target = randi() % lanes
		shootFrom(bullet,PI,Vector2(256 + (target + 1) * width,0))
		if (isDone()): return

func corral2():
	health = 80
	var tick = createTimer(0.25)
	var width = 40
	var lanes = 512 / width
	var length = 1
	
	yield(createSoundWaiter(sound).r(\"advancedCorral\"),S)
	
	while (true):
		for l in range(length):
			for i in range(lanes): shootFrom(smallBullet,PI,Vector2(256 + i * width + width / 2,0))
			yield(tick.r(),T)
		var target = randi() % lanes
		shootFrom(bullet,0,Vector2(256 + (target + 1) * width,590))
		if (isDone()): return

func sinkhole1():
	health = 50
	var tick = createTimer(0.1)
	var space = 150
	
	while (true):
		var playerPos = player.get_pos()
		for i in range(512 / space):
			var pos = Vector2(256 + i * space + space / 2,0)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
		
		for i in range(600 / space):
			var pos = Vector2(767,i * space + space / 2)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)

		for i in range(512 / space):
			var pos = Vector2(768 - i * space + space / 2,599)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
		
		for i in range(600 / space):
			var pos = Vector2(256,600 - i * space + space / 2)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
			
		if (isDone()): return


func sinkhole2():
	health = 60
	var tick = createTimer(0.1)
	var space = 100
	
	while (true):
		var playerPos = player.get_pos()
		for i in range(512 / space):
			var pos = Vector2(768 - i * space + space / 2,599)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
		
		for i in range(512 / space):
			var pos = Vector2(256 + i * space + space / 2,0)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
		
		for i in range(600 / space):
			var pos = Vector2(767,i * space + space / 2)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
		
		for i in range(600 / space):
			var pos = Vector2(256,600 - i * space + space / 2)
			shootFrom(smallBullet,pos.angle_to_point(playerPos),pos)
			yield(tick.r(),T)
			
		if (isDone()): return

func minefield():
	health = 100
	var tick = createTimer(0.15)
	var count = 30
	
	yield(createSoundWaiter(sound).r(\"minefield\"),S)
	
	while (true):
		for i in range(count):
			var pos = randi() % 600
			shootFrom(bullet,-PI / 2,Vector2(256,pos),30)
			pos = randi() % 600
			shootFrom(bullet,PI / 2,Vector2(768,pos),30)
			yield(tick.r(),T)
		
		var ib = cross.instance()
		get_parent().add_child(ib)
		ib.set_pos(player.get_pos())
		yield(createSoundWaiter(sound).r(\"ticker\"),S)
		for i in range(20): shoot(smallBullet,PI / 10 * (i + 0.5),ib)
		for i in range(20): shoot(bullet,PI / 10 * i,ib)
		ib.queue_free()
		
		if (isDone()): return
		
func waterfall():
	#yield(createSoundWaiter(sound).r(\"jam\"),S)
	health = 123
	var tick = createTimer(0.16)
	var space = 8
	var bar = 12
	var width = 512 / space
	var barWidth = width / bar
	var inc = 512 / barWidth
	
	yield(createSoundWaiter(sound).r(\"waterfall\"),S)
	
	var angle = 0
	while (true):
		angle += 1.2
		
		var pos = (sin(angle) + 1) / 2 * barWidth
		for i in range(bar): shootFrom(smallBullet,PI,Vector2(256 + pos * inc + (i - bar / 2) * space,0))
		
		pos = (cos(angle) + 1) / 2 * barWidth
		for i in range(bar): shootFrom(smallBullet,PI,Vector2(256 + pos * inc + (i - bar / 2) * space,0))
	
		pos = (tan(angle) + 1) / 2 * barWidth
		for i in range(5): shootFrom(smallBullet,PI,Vector2(256 + pos * inc + (i - 2.5) * space,0))
		
		
		yield(tick.r(),T)
		if (isDone()): return"

[sub_resource type="ConvexPolygonShape2D" id=2]

custom_solver_bias = 0.0
points = PoolVector2Array( -55.1276, 34.1842, -83.9047, -13.3813, -51.5602, -7.1978, 58.554, 30.8546, 54.7488, 51.5456 )

[sub_resource type="ConvexPolygonShape2D" id=3]

custom_solver_bias = 0.0
points = PoolVector2Array( 54.7488, 51.5456, 85.6664, 52.9726, 74.9641, 72.2366, -78.1968, 75.0906 )

[sub_resource type="ConvexPolygonShape2D" id=4]

custom_solver_bias = 0.0
points = PoolVector2Array( 53.084, -8.86259, 85.9042, -11.4787, 86.8555, 12.0662, 58.554, 30.8546 )

[sub_resource type="ConvexPolygonShape2D" id=5]

custom_solver_bias = 0.0
points = PoolVector2Array( 54.7488, 51.5456, -78.1968, 75.0906, -84.856, 43.4595, -55.1276, 34.1842 )

[sub_resource type="ConvexPolygonShape2D" id=6]

custom_solver_bias = 0.0
points = PoolVector2Array( 24.069, -62.6116, 53.084, -8.86259, 58.554, 30.8546, -51.5602, -7.1978, -24.21, -69.5086 )

[sub_resource type="Resource" id=7]

samples/advancedCorral = {
"db": 0.0,
"pitch": 1.0,
"priority": 0,
"sample": ExtResource( 2 )
}
samples/corral = {
"db": 0.0,
"pitch": 1.0,
"priority": 0,
"sample": ExtResource( 3 )
}
samples/minefield = {
"db": 0.0,
"pitch": 1.0,
"priority": 0,
"sample": ExtResource( 4 )
}
samples/ticker = {
"db": 0.0,
"pitch": 1.0,
"priority": 0,
"sample": ExtResource( 5 )
}
samples/waterfall = {
"db": 0.0,
"pitch": 1.0,
"priority": 0,
"sample": ExtResource( 6 )
}

[node name="robot" type="Sprite" groups=[
"target",
]]

position = Vector2( -5.49673, 21.7134 )
texture = ExtResource( 1 )
offset = Vector2( 5.49673, -21.7134 )
script = SubResource( 1 )
flippy = false
walky = false
target = true
speed = 100

[node name="hitbox" type="Area2D" parent="."]

visible = false
use_parent_material = true
position = Vector2( 5.49673, -21.7134 )
input_pickable = true
shapes/0/shape = SubResource( 2 )
shapes/0/transform = Transform2D( 1, 0, 0, 1, 0, 0 )
shapes/0/trigger = false
shapes/1/shape = SubResource( 3 )
shapes/1/transform = Transform2D( 1, 0, 0, 1, 0, 0 )
shapes/1/trigger = false
shapes/2/shape = SubResource( 4 )
shapes/2/transform = Transform2D( 1, 0, 0, 1, 0, 0 )
shapes/2/trigger = false
shapes/3/shape = SubResource( 5 )
shapes/3/transform = Transform2D( 1, 0, 0, 1, 0, 0 )
shapes/3/trigger = false
shapes/4/shape = SubResource( 6 )
shapes/4/transform = Transform2D( 1, 0, 0, 1, 0, 0 )
shapes/4/trigger = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="hitbox"]

show_behind_parent = true
build_mode = 0
polygon = PoolVector2Array( -83.9047, -13.3813, -51.5602, -7.1978, -24.21, -69.5086, 24.069, -62.6116, 53.084, -8.86259, 85.9042, -11.4787, 86.8555, 12.0662, 58.554, 30.8546, 54.7488, 51.5456, 85.6664, 52.9726, 74.9641, 72.2366, -78.1968, 75.0906, -84.856, 43.4595, -55.1276, 34.1842 )
shape_range = Vector2( 0, 4 )
trigger = false

[node name="sound" type="Node" parent="."]

polyphony = 1
samples = SubResource( 7 )
default/volume_db = 0.0
default/pitch_scale = 1.0
default/pan = 0.0
default/depth = 1.0
default/height = 1.0
default/filter/type = 0
default/filter/cutoff = 5000.0
default/filter/resonance = 1.0
default/filter/gain = 1.0
default/reverb_room = 2
default/reverb_send = 0.2
default/chorus_send = 1.0
